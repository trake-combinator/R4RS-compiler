#lang racket/base
(require rackunit)

(define (core-convert expr)
  expr)

(check-equal? (core-convert '3) '3)
(check-equal? (core-convert 'a) 'a)
(check-equal? (core-convert '#f) '#f)
(check-exn exn:fail? (core-convert '()))
(check-equal? (core-convert ''()) '())
(check-equal? (core-convert ''a) ''a)
(check-equal? (core-convert '(let ((x 3)) x)) 
              '((lambda (x) x) '3))
(check-equal? (core-convert '(letrec ((x 5)) x))
              '((lambda (x) (begin (set! x '5) x)) '#f))
(check-equal? (core-convert ''#(a b c))
              ''#3(a b c))
(check-equal? (core-convert '(set! x (let ((x 3)) x)))
              '(set! x ((lambda (x) x) '3)))
(check-exn exn:fail? (core-convert '(set! 3 8)))
(check-equal? (core-convert '(lambda (a b c) d))
              '(lambda (a b c) d))
(check-exn exn:fail? (core-convert '(lambda (a a c) d)))
